package leetcode21

import (
	"fmt"
	"reflect"
	"testing"
)

var cases = []struct {
	given int
	want  []string
}{
	{
		given: 1,
		want:  []string{"()"},
	}, {
		given: 2,
		want:  []string{"(())", "()()"},
	}, {
		given: 3,
		want:  []string{"((()))", "(()())", "(())()", "()(())", "()()()"},
	}, {
		given: 4,
		want: []string{"(((())))", "((()()))", "((())())", "((()))()",
			"(()(()))", "(()()())", "(()())()", "(())(())", "(())()()",
			"()((()))", "()(()())", "()(())()", "()()(())", "()()()()"},
	}, {
		given: 5,
		want: []string{"((((()))))", "(((()())))", "(((())()))", "(((()))())",
			"(((())))()", "((()(())))", "((()()()))", "((()())())",
			"((()()))()", "((())(()))", "((())()())", "((())())()",
			"((()))(())", "((()))()()", "(()((())))", "(()(()()))",
			"(()(())())", "(()(()))()", "(()()(()))", "(()()()())",
			"(()()())()", "(()())(())", "(()())()()", "(())((()))",
			"(())(()())", "(())(())()", "(())()(())", "(())()()()",
			"()(((())))", "()((()()))", "()((())())", "()((()))()",
			"()(()(()))", "()(()()())", "()(()())()", "()(())(())",
			"()(())()()", "()()((()))", "()()(()())", "()()(())()",
			"()()()(())", "()()()()()"},
	},
}

func TestCases(t *testing.T) {
	for _, tt := range cases {
		t.Run(fmt.Sprint(tt.given), func(t *testing.T) {
			got := generateParenthesis(tt.given)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("\ngiven: %#v\ngot:   %#v\nwant:  %#v\n", tt.given, got, tt.want)
			}
		})
	}
}

func BenchmarkCases(b *testing.B) {
	for n := 0; n < b.N; n++ {
		for _, tt := range cases {
			generateParenthesis(tt.given)
		}
	}
}
